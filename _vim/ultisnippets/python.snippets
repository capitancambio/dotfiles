snippet _log "add logger attribute" !b
import logging

logger = logging.getLogger(__name__)
endsnippet

snippet ld "logger debug"
logger.debug("${1}")
endsnippet

snippet li "logger info"
logger.info("${1}")
endsnippet

snippet lw "logger warn"
logger.warn("${1}")
endsnippet

snippet le "logger error"
logger.error("${1}")
endsnippet

snippet lex "logger exception"
logger.exception(${1:e})
endsnippet

snippet _in "import numpy" b
import numpy as np
endsnippet

snippet _pd "import numpy" b
import pandas as pd
endsnippet

snippet tp "import typing extensions" b
from typing_extensions import Protocol
endsnippet

snippet ty "import typing extensions" b
from typing import ${1:Optional}
endsnippet

snippet mm "magic mock"
mock.MagicMock()
endsnippet

snippet fix "fixture"
@pytest.fixture
def ${1:name}(${2:self}):
	$0
endsnippet

snippet param "parametrize"
@pytest.mark.parametrize(
	"${1:args}",
	[]
)
def ${2:name}($1):
	$0
endsnippet

snippet patch "mock patch"
@mock.patch($0)
endsnippet

snippet asstype "assert type"
assert isinstance(${1:next_state} ,${2:scenario.})
endsnippet

snippet ass "assert"
assert ${1}
endsnippet

snippet clt "Test class"
class Test${1:Class}(object):
	def test_${2:name}(self):
		$0
endsnippet

snippet pf "print debug"
print("${1}", $1)
endsnippet



	
