snippet _log "add logger attribute" !b
import pyutils.logger  

logger=pyutils.logger.getLogger("fh.$0")
endsnippet

snippet _in "import numpy" b
import numpy as np
endsnippet

snippet mm "magic mock"
mock.MagicMock()
endsnippet

snippet fix "fixture"
@pytest.fixture
def ${1:name}(${2:self}):
	$0
endsnippet

snippet patch "mock patch"
@mock.patch($0)
endsnippet

snippet asstype "assert type"
assert isinstance(${1:next_state} ,${2:scenario.})
endsnippet

snippet clt "Test class"
class Test${1:Class}(object):

	def test_${2:name}(self):
		$0
endsnippet
	
snippet i_o "import olly"
import featurehub.olly as olly
endsnippet

snippet i_f "import featurehub"
import featurehub.$1 as $1
endsnippet

snippet scenario "creates a new scenario"
import featurehub.statemachine as sm
import featurehub.olly as olly

class InitialState(sm.State):
	
	def on_activate(self):
		$0
	
@olly.scenario(app_id='sm_${1:name}',
               rules={"event": olly.Events.${2:Event},
                      "type": ["sm.$1"]})
class ${3:class}(sm.Scenario):
    def __init__(self, api, _):
        sm.Scenario.__init__(
            self,
            api,
            InitialState(),
            state_descriptors=[
                sm.StateDescriptor(
                    InitialState,
                    locked=True,
                    transitions=[
                        sm.DefaultTimeout(
                            function=InitialState.on_timeout,
                            allowed_transitions=[sm.FinishedState]
                        )],
                ),
                sm.FinishedState.get_descriptor(),
                sm.ParkMotorsState.get_descriptor(),
            ]
        )
endsnippet

snippet state "state"
class ${1}State(sm.State):
	
	def on_activate(self):
		$0
endsnippet

snippet osay "olly say"
self.olly.say("$0")
endsnippet


	
